openapi: 3.0.0
info:
  description: |
    Welcome to our Nationex integration API.
    All of Nationex's APIS are organized around REST. If you’ve used RESTful APIs before, many of the concepts here will be familiar to you. 
    Each resource has a unique URL, and HTTP verbs are used to specify actions you want to perform on each resource. 
    All request and response bodies, including errors, are encoded in JSON.

    # Introduction
    Here’s what you can do with our APIs :
    - Create, update, cancel shipment.
    - Get shipment current status.
    - Get shipment rates.
    - Get shipment manifest.
    - Get labels. 

    # API version
    We release new versions when we make backwards-incompatible changes to our APIs.
    The current version of our APIs is v4, so the base URL will always look something like this :

    **https://api.nationex.com/api/v4**

    # Requirements
      You need to get API keys from our IT team at **tech@nationex.com**. You will start with API devlopement key and when you are ready to go live you will change your API for the production one.

    # Authentication
    Nationex Restfull API needs authentication:
      Basic authentication is a simple authentication scheme built into the HTTP protocol. The client sends HTTP requests with the `Authorization header` that contains the word Basic word followed by a space and **a base64-encoded string username:password**. 
      For example, to authorize as demo / p@55w0rd the client would send Authorization: Basic ZGVtbzpwQDU1dzByZA==
    <SecurityDefinitions />
    # Response code
    | Status Code | Description | Note |
      |----|----|----|
      |`200` |  OK - The request was successful (some API calls may return 201 instead on `PUT`).|  <ul><li>GET request returns a representation of the requested entity.</li><li>The body of other requests will be a Status entity.</li></ul>|
      |`201` | Created - The request was successful and a resource was created. |<ul><li>This cannot happen on GET or DELETE requests.</li><li>This will happen on POST and may happen on PUT requests. </li></ul>
      |`204` | No Content | <ul><li>The request was successful but there is no representation to return (that is, the response is empty). </li></ul>|
      |`400` | Bad Request |  <ul><li>The request is invalid the body was missing required parameters and or parameter did not respect data validation see error messages in body.</li></ul>|
      |`401` | Unauthorized | <ul><li>Client authentication failed (invalid **user/password**). </li></ul> |
      |`403` | Forbidden | <ul><li>Access denied due to missing **Permissions**</li></ul>|
      |`404` | Not Found | <ul><li>No resource was found at this location (URI)</li><li>If the requested URL contains an **ID** , this means that we did not find anything matching the ID</li></ul>|
      |`405` | Method Not Allowed | <ul><li>Requested method is not supported for the specified resource. </li></ul>|
      |`406` | Not Acceptable | <ul><li>Request contains **Bad headers** for this request</li></ul>|
      |`5xx` | Server-Side Error | <ul><li>These codes should not be set programmatically and are reserved for unexpected errors. </li></ul>|
  version: '4.0'
  title: Nationex API
  contact:
    email: tech@nationex.com
    url: https://nationex.com
  x-logo:
    url: 'https://apidocs.nationex.com/images/Nationex_logo.png'
    altText: Nationex logo    
servers:
  - url: 'https://api.nationex.com/api/v4'
    variables:
      environment:
        default: Development
        enum:
          - Production
          - Development
      version:
        default: "4"
        enum:
          - "4"
paths:
  /Shipments:
    post:
      tags:
        - Shipments
      summary: 'Create shipment'
      description: 'Create a new shipment'
      security:
        - BasicAuth: []
      requestBody:
          description: Shipment to create
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOShipmentCreate'
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOShipmentCreated'
        '400':
          description: 'InvalidInput: 	The max length of a field has been exceeded or the postal code is not covered by Nationex. The specific error message will be returned'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidInput'
              example: 
                code: 400
                message: "Address1 length is too long"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '409':
          description: 'Conflict: The ShipmentId already exists. Can only happen if shipmentId is provided by user (shipmentId != -1)'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Conflict'
              example: 
                code: 409
                message: "Duplicate shipment ID: 501339228"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Shipments/{id}:
    get:
      tags:
        - Shipments
      summary: 'Get shipment'
      description: 'Returns details about a particular shipment'
      operationId: getShipment
      parameters:
        - name: id
          in: path
          description: ID of the shipment (9 digits)
          required: true
          example: 999999999
          schema:
            type: integer
            format: int32
            minimum: 100000000
            maximum: 999999999
        - name: tracking
          in: query
          description: Returns tracking (parcel history) or not
          example: true
          required: false
          schema:
            type: boolean
        - name: parcels
          in: query
          description: Returns the parcel infos (weights & dimensions) or not
          example: true
          required: false
          schema:
            type: boolean
        - name: consol
          in: query
          description: Returns all consolidated shipments or not
          example: true
          required: false
          schema:
            type: boolean
        - name: images
          in: query
          description: Returns all photos and signatures of the shipment
          example: true
          required: false
          schema:
            type: boolean
        - name: includeAll
          in: query
          description: Returns all parcel histories that are normally not displayed on the website. This parameter is hidden from the public Api.
          example: true
          required: false
          schema:
            type: boolean
        - name: key
          in: query
          description: (Optional) Allows someone with the key to access the shipment without having Api Basic credentials, the key is unique to the shipment.
          example: "1Z5DKWDpyPfcRDuY13W0UzI5LKfpelgod"
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Details about a shipment by ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOShipment'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ShipmentId 501399432 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
    delete:
      tags:
        - Shipments
      summary: 'Cancel shipment'
      description: 'Cancel a shipment, can only be used before 8 PM EST'
      operationId: delete
      parameters:
        - name: id
          in: path
          description: ID of the shipment
          required: true
          schema:
            type: integer
            format: int32
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                      value:
                        true
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ShipmentId 501399432 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
    put:
      tags:
        - Shipments
      summary: 'Update shipment'
      description: 'Update Address, SNR or notes of a shipment'
      operationId: updateShipment
      security:
        - BasicAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the shipment
          required: true
          schema:
            type: integer
            format: int32
            minimum: 100000000
            maximum: 999999999
        - name: key
          in: query
          description: (Optional) Allows someone with the key to access the shipment without having Api Basic credentials, the key is unique to the shipment.
          example: "1Z5DKWDpyPfcRDuY13W0UzI5LKfpelgod"
          required: false
          schema:
            type: string
      requestBody:
          description: "shipment info"
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOShipment'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                        value:
                          true
        '400':
          description: 'InvalidInput: 	The max length of a field has been exceeded or the postal code is not covered by Nationex. The specific error message will be returned'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidInput'
              example: 
                code: 400
                message: "Address1 length is too long"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ShipmentId 501399432 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Shipments/{id}/reports:
    get:
      tags:
        - Shipments
      summary: 'Get shipment status report'
      description: 'Returns details about a particular shipment in PDF'
      operationId: getReports
      parameters:
        - name: id
          in: path
          description: ID of the shipment
          example: 999999999
          required: true
          schema:
            type: integer
            format: int32
        - name: language
          in: query
          required: true
          description: Language of the report
          schema:
            type: string
            enum: [Fr, En]
          example: Fr
        - name: consol
          in: query
          description: Returns the consolIds or not
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: 'Success'
          content:
            application/pdf:
              schema:
                type: string
                format: binary 
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ShipmentId 501399432 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Shipments/{id}/labels:
    get:
      tags:
        - Shipments
      summary: 'Get labels'
      description: 'Returns labels attached to a particular shipment'
      operationId: getLabels
      parameters:
        - name: id
          in: path
          description: ID of the shipment or ID of a parcel for a single label
          required: true
          example: 103848576
          schema:
            type: integer
            format: int64
        - name: orientation
          in: query
          description: Orientation of the file
          example: landscape
          required: false
          schema:
            type: string
            enum: [landscape, portrait]
            default: landscape
        - name: format
          in: query
          description: Page format of the file
          required: false
          schema:
            type: string
            enum: [4x6, 85x11]
            default: 4x6
          example: 4x6
      responses:
        '200':
          description: 'Success'
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ShipmentId 501399432 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Shipments/{id}/labelsZpl:
    get:
      tags:
        - Shipments
      summary: 'Get labels ZPL'
      description: 'Returns ZPL label strings attached to a particular shipment'
      operationId: getLabelsZpl
      parameters:
        - name: id
          in: path
          description: ID of the shipment or ID of a parcel for a single label
          required: true
          example: 103848576
          schema:
            type: integer
            format: int64
        - name: orientation
          in: query
          description: Orientation of the file
          example: landscape
          required: false
          schema:
            type: string
            enum: [landscape, portrait]
            default: landscape
      responses:
        '200':
          description: 'ZPL String'
          content:
            application/json:
              schema:
                type: object
                properties:
                  ZPLString:
                    type: string
              examples:
                    String Response:
                      value:
                        '^XA^LRY\r\n^CF0,,30^FWR,0^FO750,100^FDLIBRAIRIE LU-LU ( ALQ )^FS\r\n^FO750,770^FDDATE: 2021-05-02^FS\r\n^FO750,1030^FD11:15:07^FS\r\n^FO720,100^FD144890^FS\r\n^FO720,770^FDREF: LIQ631858^FS\r\n^FO710,100^GB1,1040,3^FS\r\n^FO665,100^FDPOIDS(lbs): 1.00^FS\r\n^FO665,350^FD(KG): 0.45^FS\r\n^FO660,100^GB1,1040,3^FS\r\n^FO610,100^FDAURELIE CONSTANCIAS^FS\r\n^FO580,100^FD1259 RUE DU PEKAN^FS\r\n^FO550,100^FD^FS\r\n^FO520,100^FDSAINTE-JULIENNE, QC^FS\r\n^FO490,100^FDJ0K2T0^FS\r\n^CF0,,80^FWR,0^FO540,890^FDJ0K^FS\r\n^FO165,1040^GB95,50,90,b^FS\r\n^FO160,1050^FD^FS\r\n^FO545,720^GB95,160,90,b^FS\r\n^FO540,730^FDBLV^FS\r\n^FO390,1110^FD1^FS\r\n^FO370,660^BY4,2,230^BCr,150,Y,N,N^FDJ0K2T0^FS\r\n^FO80,100^BY5,2,230^B2r,,n,,n^FD999989028016^FS\r\n^CF0,, 45^FWR,0^FO20,210^FD999989028^FS\r\n^CF0,,40^FWR,0^FO70,630^FD1^FS\r\n^FO70,650^FD/1^FS\r\n^FO160,700^GB150,285,75,b^FS\r\n^FO250,720^FDFloor: ^FS\r\n^FO210,720^FDRoute: 25^FS\r\n^FO170,720^FDDriver: 250^FS\r\n^XZ'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ShipmentId 501399432 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Shipments/:
    get:
      tags:
        - Shipments
      summary: 'Get shipment list'
      description: 'Returns the list of shipments if searching by address, or a list containing a single shipment if searching by waybill (ShipmentId, Barcode, ParcelId or Reference)'
      operationId: getListShipment
      parameters:
        - name: customer
          in: query
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema: 
            type: integer
            format: int32
        - name: search
          in: query
          description: Query string for search
          required: false
          schema:
            type: string
          example: 123 Main Street, New York, NY 10030
        - name: waybill
          in: query
          description: Get single shipment from ShipmentId, Barcode, ParcelId or Reference
          required: false
          schema:
            type: string
          example: 501938372
        - name: startDate
          in: query
          description: Start date in date range, defaults to current date.
          required: false
          schema:
            type: string
            format: date
          example: "2018-05-01"
        - name: endDate
          in: query
          description: End date in date range, defaults to current date.
          required: false
          schema:
            type: string
            format: date
          example: "2018-06-01"
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
          example: "1"
        - name: size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            format: int32
          example: "20"
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DTOShipment'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ShipmentId 501399432 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Users/login:
    post:
      tags:
        - Users
      summary: 'Get login'
      description: 'Logs in and returns the authentication cookie'
      requestBody:
        description: A JSON object containing the login and password
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security: [] # no authentication
      responses:
        '200':
          description: >
            Successfully authenticated
            The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.
          #headers:
          #  Set-Cookie:
          #    schema:
          #      type: string
          #      example: JSESSIONID=abcde12345; Path=/; HttpOnly
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ShipmentId 501399432 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Users/loginConsignee:
    post:
      tags:
        - Users
      summary: 'Get login'
      description: 'Get WebKey from shipmentId, postal code, last 4 characters of note'
      requestBody:
        description: A JSON object containing the login and password
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/DTOLoginConsigneeRequest'
      security: [] # no authentication
      responses:
        '200':
          description: 'WebKey to access some restricted features'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: string
              examples:
                    String Response:
                      value:
                        'fHbI7OcsqV3crWztsk12tTCn8CNLmiZop'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ShipmentId 501399432 does not exist"
        '500':
          description: 'InternalServerError: There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Users/:
    post:
      tags:
        - Users
      summary: 'Create user'
      description: 'Update an user account'
      operationId: createUser
      requestBody:
        description: User object as JSON
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DTOUser'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                      value:
                        true
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "Page not found"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Users/{id}:
    put:
      tags:
        - Users
      summary: 'Update user'
      description: 'Update an user account'
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          example: 1038
          schema:
            type: integer
            format: int32
      requestBody:
        description: User object as JSON
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DTOUser'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                      value:
                        true
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "Page not found"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
    delete:
      tags:
        - Users
      summary: 'Delete user'
      description: 'Delete a user account'
      operationId: deleteUser
      security:
        - BasicAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          example: 1038
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                      value:
                        true
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "Page not found"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Users/{id}/changePassword:
    post:
      tags:
        - Users
      summary: Change Password'
      description: 'Change a user''s password'
      operationId: changePassword
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          example: 1038
          schema:
            type: integer
            format: int32
      requestBody:
        description: Request to change password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DTOChangePasswordRequest'
      security: [] # no authentication
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                      value:
                        true
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "Page not found"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/:
    get:
      tags:
        - Customers
      summary: 'Get customer info'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema: 
            type: integer
            format: int32
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOCustomerInfo'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The CustomerInfo does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 409
                message: "Resource not found"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"  
  /Customers/{id}/rates:
    post:
      tags:
        - Customers
      summary: 'Get rates'
      description: 'Get rates for a shipment'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
      security:
        - BasicAuth: []
      requestBody:
          description: Shipment rates request
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOShipmentRatesRequest'
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTORatesDetail'
        '400':
          description: 'InvalidInput: 	The postal code is not covered by Nationex or other invalid input. The specific error message will be returned'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidInput'
              example: 
                code: 400
                message: "The postal code 'A0A0A7' is not served by Nationex"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/consignees:
    post:
      tags:
        - Customers
      summary: 'Create consignee'
      description: 'Create a consignee'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
      requestBody:
          description: Consignee to modify
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOConsignee'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOConsigneeCreated'
        '400':
          description: 'InvalidInput:	The max length of a field has been exceeded or other input error. Specific error message will be returned'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidInput'
              example: 
                code: 400
                message: "Address1 length is too long"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/consignees/{consigneeId}:
    get:
      tags:
        - Customers
      summary: 'Get consignee'
      description: 'Get consignee details'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
        - in: path
          name: consigneeId
          description: Consignee Id used to identify and retrieve the consignee, also known as Account Id
          required: true
          example: 234423
          schema:
            type: integer
            format: int64
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOConsignee'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ConsigneeId 388283984 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
    put:
      tags:
        - Customers
      summary: 'Modify consignee'
      description: 'Modify a consignee details'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
        - in: path
          name: consigneeId
          description: Consignee Id used to identify and retrieve the consignee, also known as Account Id
          required: true
          example: 234553
          schema:
            type: integer
            format: int64
      requestBody:
          description: Consignee to modify
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOConsignee'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                        value:
                          true
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ConsigneeId 388283984 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
    delete:
      tags:
        - Customers
      summary: 'Delete consignee'
      description: 'Delete a consignee'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
        - in: path
          name: consigneeId
          description: Consignee Id used to identify and retrieve the consignee, also known as Account Id
          required: true
          example: 234644
          schema:
            type: integer
            format: int64
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                      value:
                        true
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ConsigneeId 388283984 does not exist"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/consignees/:
    get:
      tags:
        - Customers
      summary: 'Get consignee list'
      description: 'Get list of consignee details'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
        - in: query
          name: paging
          description: Page number starting at 0
          required: true
          example: 0
          schema:
            type: integer
            format: int32
            default: 0
        - in: query
          name: count
          description: Number of consignees returned
          required: true
          example: 100
          schema:
            type: integer
            format: int32
            maximum: 5000
        - in: query
          name: includeArchived
          description: If true, also return the consignees that have been deleted
          required: false
          example: false
          schema:
            type: boolean
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DTOConsignee'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/consignees/validate:
    get:
      tags:
        - Customers
      summary: 'Validate Consignee'
      description: 'Returns true if the consignee is not a duplicate'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
        - in: query
          name: noDest
          description: Destination account number
          required: true
          example: '34343A'
          schema:
            type: string
        - in: query
          name: address1
          description: Destination Address1
          required: true
          example: '34343A'
          schema:
            type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                      value:
                        true
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/consignees/import:
    post:
      tags:
        - Customers
      summary: 'Import Consignees'
      description: 'Imports a list of consignees file, xlsx format'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
      requestBody:
        content:
          xlsx:
            schema:
              type: string
              format: binary
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                      value:
                        true
        '400':
          description: 'InvalidInput: The address is invalid or already exists'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidInput'
              example: 
                code: 400
                message: "Address1 'abc' is invalid"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/contacts/{contactId}:
    get:
      tags:
        - Customers
      summary: 'Get contact'
      description: 'Get contact details'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
        - in: path
          name: contactId
          description: Contact Id used to identify and retrieve the contact
          required: true
          example: 104423
          schema:
            type: integer
            format: int64
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOContact'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ContactId 388283984 does not exist"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
    put:
      tags:
        - Customers
      summary: 'Modify contact'
      description: 'Modify a contact details'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
        - in: path
          name: contactId
          description: Contact Id used to identify and retrieve the contact
          required: true
          example: 104553
          schema:
            type: integer
            format: int64
      requestBody:
          description: Contact to modify
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOContact'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                        value:
                          true
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ContactId 388283984 does not exist"
        '500':
          description: 'InternalServerError: There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
    delete:
      tags:
        - Customers
      summary: 'Delete contact'
      description: 'Delete a contact'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
        - in: path
          name: contactId
          description: Contact Id used to identify and retrieve the consignee
          required: true
          example: 104644
          schema:
            type: integer
            format: int64
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                      value:
                        true
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ContactId 388283984 does not exist"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/contacts/:
    get:
      tags:
        - Customers
      summary: 'Get contact list'
      description: 'Get all contacts details'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DTOContact'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/contacts:
    post:
      tags:
        - Customers
      summary: 'Create contact'
      description: 'Create contact'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
            minimum: 10000
            maximum: 999999
      requestBody:
          description: Contact to create
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOContact'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOContactCreated'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "ContactId 388283984 does not exist"
        '500':
          description: 'InternalServerError: There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/transitDelay:
    get:
      tags:
        - Customers
      summary: 'Get transit delay'
      description: 'Get estimated date of delivery for a specified Destination'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
        - in: query
          name: shipmentType
          description: Type of shipment
          required: false
          schema:
            type: string
            enum: [Delivery, PickupReturn, PickupDelivery]
            example: Delivery
            default: Delivery
        - in: query
          name: destPostalCode
          description: Postal Code of the destination, required for Delivery and PickupDelivery. Customer's postal code is used as default for PickupReturn.
          required: false
          example: J4T2S2
          schema:
            type: string
            maxLength: 6
        - in: query
          name: origPostalCode
          description: Postal Code of the origin, required for PickupReturn and PickupDelivery. Customer's postal code is used by default for Delivery
          required: false
          example: J4Z2S5
          schema:
            type: string
            maxLength: 6
        - in: query
          name: pickupDate
          description: Date of pickup. Defaults to Today for Delivery, and to next business day for PickupReturn and PickupDelivery.
          required: false
          example: "2021-05-07"
          schema:
            type: string
            format: date
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOTransitDelay'
        '400':
          description: 'InvalidInput:	The postal code is not server by Nationex or other input error. Specific error message will be returned'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidInput'
              example: 
                code: 400
                message: "Postal code A0A0A7 is not served by Nationex"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "Postal code A0A0A0 not found"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/driverManifests:
    get:
      tags:
        - Customers
      summary: 'Get driver manifest'
      description: 'Get a PDF report to print and give to the Nationex driver when he comes and pick up shipments'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
        - in: query
          name: startDate
          description: Starting date of the shipments included in the manifest. Defaults to current date
          required: false
          example: "2021-03-31"
          schema:
            type: string
        - in: query
          name: endDate
          description: Ending date of the shipments included in the manifest. Defaults to current date
          required: false
          example: "2021-03-31"
          schema:
            type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          headers:
            Content-Disposition:
              schema:
                type: string
                description: Used only with `application/pdf` responses
                example: attachment; filename="manifest_2021-04-28.pdf"
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/customerManifests:
    get:
      tags:
        - Customers
      summary: 'Get customer manifest'
      description: 'Get a list of shipments created between specified dates in PDF or XLSX format'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
        - in: query
          name: startDate
          description: Starting date of the shipments included in the report. Defaults to the current date
          required: false
          example: "2021-03-31"
          schema:
            type: string
        - in: query
          name: endDate
          description: Ending date of the shipments included in the report. Defaults to the current date
          required: false
          example: "2021-03-31"
          schema:
            type: string
        - in: query
          name: format
          description: Format of the report, either pdf or xlsx. Defaults to PDF
          required: false
          example: pdf
          schema:
            type: string
            enum: [xlsx, pdf]
            default: pdf
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          headers:
            Content-Disposition:
              schema:
                type: string
                description: Used only with `application/pdf` responses
                example: attachment; filename="manifest_2021-04-28.pdf"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/economaxPackage:
    put:
      tags:
        - Customers
      summary: 'Renew economax package'
      description: 'Renew an economax package'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
      requestBody:
          description: Renewal package information
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOEconomaxPackageRenewal'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                        value:
                          true
        '400':
          description: 'InvalidInput:	Specific error message will be returned'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidInput'
              example: 
                code: 400
                message: "Customer 113300 is not active"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError: 	There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/SendPickupNotification:
    get:
      tags:
        - Customers
      summary: 'Send a pickup notification'
      description: 'Sends a notification to the  email provided'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
        - in: query
          name: shipmentId
          description: Nationex Shipment Id (9 digits)
          required: true
          example: 501293728
          schema:
            type: integer
            format: int32
            minimum: 100000000
            maximum: 999999999
        - in: query
          name: email
          description: Email address
          required: true
          example: myemail@gmail.com
          schema:
            type: string
        - in: query
          name: language
          description: "Email language"
          required: true
          example: Fr
          schema:
            type: string
            enum: [Undefined, Fr, En]
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                        value:
                          true
        '400':
          description: 'InvalidInput:  Specific error message will be returned'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidInput'
              example: 
                code: 400
                message: "Email myem/ail@gmail.com is invalid"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/SendPickupLivNotification:
    get:
      tags:
        - Customers
      summary: 'Send pickup-delivery notification'
      description: 'Sends a notification to the email provided'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
        - in: query
          name: shipmentId
          description: Nationex Shipment Id (9 digits)
          required: true
          example: 501293728
          schema:
            type: integer
            format: int32
            minimum: 100000000
            maximum: 999999999
        - in: query
          name: email
          description: Email address
          required: true
          example: myemail@gmail.com
          schema:
            type: string
        - in: query
          name: language
          description: "Email language" 
          required: true
          example: Fr
          schema:
            type: string
            enum: [Undefined, Fr, En]
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                        value:
                          true
        '400':
          description: 'InvalidInput:  Specific error message will be returned'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidInput'
              example: 
                code: 400
                message: "Email myem/ail@gmail.com is invalid"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/billing:
    get:
      tags:
        - Customers
      summary: 'Get invoice list'
      description: 'Get a list of invoices infos and links to download individual documents'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
        - in: query
          name: startDate
          description: Starting date for invoices
          required: true
          example: '2021-02-05'
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: Ending date for invoices
          required: true
          example: '2021-05-05'
          schema:
            type: string
            format: date
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DTOInvoiceInfo'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "No invoice found"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/rateList:
    get:
      tags:
        - Customers
      summary: 'Get rates PDF'
      description: 'Get a PDF for the customer''s rates'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          headers:
            Content-Disposition:
              schema:
                type: string
                description: Used only with `application/pdf` responses
                example: attachment; filename="rates_113300_2021-04-28.pdf"
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Customers/{id}/validateCollect:
    get:
      tags:
        - Customers
      summary: 'Validate Collect'
      description: 'Validate collect account'
      parameters:
        - in: path
          name: id
          description: Nationex Customer Id (5 or 6 digits)
          required: true
          example: 113300
          schema:
            type: integer
            format: int32
        - in: query
          name: customerId
          description: Nationex Customer Id (5 or 6 digits) of the collect account
          required: true
          example: 165556
          schema:
            type: integer
            format: int32
        - in: query
          name: postalCode
          description: Postal code of the collect account
          required: true
          example: J3Y5T7
          schema:
            type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'True if the collect account is valid'
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: boolean
              examples:
                    Boolean Response:
                        value:
                          false
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Locations/{postalCode}:
    get:
      tags:
        - Locations
      summary: 'Get location'
      description: 'Get location services availability'
      parameters:
        - in: path
          name: postalCode
          description: Postal code
          required: true
          example: H1B1Y8
          schema:
            type: string
            maxLength: 6
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DTOLocation'
        '400':
          description: 'InvalidInput:  The postal code format is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InvalidInput'
              example: 
                code: 400
                message: "Postal code A0A0A is not valid"
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '404':
          description: 'NotFound: The resource requested does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example: 
                code: 404
                message: "Postal code D0A1A0 does not exist"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"
  /Locations:
    get:
      tags:
        - Locations
      summary: 'Get location list'
      description: 'Get list of locations services availability'
      parameters:
        - in: query
          name: page
          description: Page iterator
          required: true
          example: 0
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - in: query
          name: count
          description: "Locations count"
          required: true
          example: 100
          schema:
            type: integer
            format: int32
            maximum: 5000
      security:
        - BasicAuth: []
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DTOLocation'
        '401':
          description: 'Unauthorized: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers.'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Unauthorized'
              example: 
                code: 401
                message: "Invalid key"
        '500':
          description: 'InternalServerError:   There has been an unexpected error in our server'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              example: 
                code: 500
                message: "Internal server error"     
components:
  securitySchemes:
    BasicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  responses:
      NotFound:
        description: "ErrorCode 404: The specified resource was not found"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      Unauthorized:
        description: "ErrorCode 401: The key is either missing, or is used on the wrong server, or is not associated with the provided CustomerId. Dev keys can only be used on our dev servers and production keys can only be used on our production servers."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      Conflict:
        description: "ErrorCode 409: The resource already exists"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      InternalServerError:
        description: "ErrorCode 500: There has been an unexpected error in our server"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      InvalidInput:
        description: "ErrorCode 400: There is some part of the input that is invalid"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: User's username
          example: user123
        password:
          type: string
          description: User's password
          example: password123
    DTOLoginConsigneeRequest:
      type: object
      required:
        - ShipmentId
        - PostalCode
        - NoteEnd
      properties:
        ShipmentId:
          type: string
          description: 9 digits number, used to identify and track the shipment
          example: user123
        PostalCode:
          type: string
          description: User's password
          example: A0A0A7
        NoteEnd:
          type: string
          description: '4 last characters of the shipment Note'
          example: 8293
    DTOUser:
      type: object
      required:
        - Username
      properties:
        UserId:
          type: string
          description: User Id
          example: 29109
        Username:
          type: string
          description: User's username
          example: User123
        Password:
          type: string
          description: User's password
          example: Password123
        Email:
          type: string
          description: User's email
          example: test@test.com
        FirstName:
          type: string
          description: First name
          example: Joe
        LastName:
          type: string
          description: Last name
          example: Dough
        IsMaster:
          type: boolean
          description: Is master
        LastLogin:
          type: string
          format: date-time
          description: Date and time of last login
        LastUpdate:
          type: string
          format: date-time
          description: Date and time of last update
        DateInsert:
          type: string
          format: date-time
          description: Date and time of creation
        DownloadManifest:
          type: boolean
          description: Has access to download manifest
        ShowRate:
          type: boolean
          description: Has access to see rates
        ShowInvoice:
          type: boolean
          description: Has access to see invoices
        RenewEconomax:
          type: boolean
          description: Has access to renew economax package
        ShowEconomaxBank:
          type: boolean
          description: Has access to see economax balance
        ShowShipmentHistory:
          type: boolean
          description: Has access to see shipment history
    DTOParcelHistory:
      type: object
      description: 'Event of a single parcel'
      properties:
        ParcelHistoryId:
          type: integer
          format: int64
          description: 'ID of the parcel history'
          example: 3049373748
        ProcessedDate:
          type: string
          format: date-time
          description: 'Date time of the event'
          example: "2021-03-31 13:31:00"
        ExceptionId:
          type: integer
          format: int32
          description: 'ID of the exception code'
          example: 5
        CityDepot:
          type: string
          description: 'Name of the city of the depot where the event occured'
          example: 'Blainville'
        DescriptionFr:
          type: string
          description: 'Description of parcel history in french'
          example: 'Destinataire indisponible - Tentative de livraison le jour ouvrable suivant'
        DescriptionEn:
          type: string
          description: 'Description of parcel history in english'
          example: 'Unavailable consignee - Delivery attempt on next business day'
        PhotoId:
          type: integer
          format: int64
          description: 'Id of the photo image, found in DTOShipment'
          example: 18840452
        SignatureId:
          type: integer
          format: int64
          description: 'Id of the signature image, found in DTOShipment'
        Geocoding:
          $ref: '#/components/schemas/DTOGeocoding'
    DTOAccessory:
      type: object
      properties:
        InsuranceAmount:
          type: number
          format: float
          description: "Total price value to be insured"
          maximum: 2500
          example: 0
          default: 0
        FrozenProtection:
          type: boolean
          description: "Freezing protection"
        DangerousGoods:
          type: boolean
          description: "Dangerous goods"
        Before10h30am:
          type: boolean
          description: "Deliver before 10:30 AM service"
        SNR:
          type: boolean
          description: "No signature required"
        COD:
          $ref: '#/components/schemas/DTOCashOnDelivery'
    DTOCashOnDelivery:
      type: object
      properties:
        CODType:
          type: string
          example: "Check"
          enum: [NoCOD, Check, Cash, PostDatedCheck, CertifiedCheck]
          description: "Type of Cash on delivery"
        CODAmount:
          type: number
          format: float
          example: 24.12
          default: 0
          maximum: 50000
          description: "Amount of cash on delivery"
    DTODestination:
      type: object
      properties:
        Contact:
          type: string
          description: Name of the person receiving the shipment
          example: Sonia
          maxLength: 50
        AccountNumber:
          type: string
          description: Account Id used to identify and retrieve the consignee
          example: NC33233
          maxLength: 20
        AccountName:
          type: string
          description: Consignee name
          example: Coffee Shop
          maxLength: 40
        Address1:
          type: string
          description: First part of address, includes street number and street name
          example: 433 Apple street
          maxLength: 35
        Address2:
          type: string
          description: Second part of address, optional
          example: 3rd floor
          maxLength: 35
        PostalCode:
          type: string
          example: H2H2S2
          maxLength: 6
        City:
          type: string
          example: Montreal
          maxLength: 35
        ProvinceState:
          type: string
          example: QC
          maxLength: 50
        Phone:
          type: string
          example: 4183776671
          maxLength: 15
        IsResidential:
          type: boolean
          example: true
          default: false
        SmsNotification:
          type: boolean
          description: Enable or disable SMS notifications
          example: true
          default: false
        EmailNotification:
          type: boolean
          description: Enable or disable Email notifications
          example: true
          default: false
        NoCivic:
          type: string
          description: Civic address number or street number
          example: 880
          maxLength: 20
        Suite:
          type: string
          example: 400
          maxLength: 30
        StreetName:
          type: string
          description: Name of the street
          example: Rue Claudia
          maxLength: 50
        Email:
          type: string
          maxLength: 255
          example: example@gmail.com
    DTOCustomerInfo:
      type: object
      properties:
        CustomerId:
          type: integer
          format: int32
          description: Nationex Customer Id (5 or 6 digits)
          example: 113300
        Name:
          type: string
          description: Customer Name
          example: Nationex
        ShortName:
          type: string
          description: Shorter customer name
          example: Nationex
        Address1:
          type: string
          description: First part of address, includes street number and street name
          example: 433 Apple street
        Address2:
          type: string
          description: Second part of address, optional
          example: 3rd floor
        City:
          type: string
          example: Montreal
        Province:
          type: string
          example: QC
        PostalCode:
          type: string
          example: H2H2S2
        Phone:
          type: string
          example: 4183776671
        Phone2:
          type: string
          example: 4183776671
        Fax:
          type: string
          example: 4183776671
        Language:
          type: string
          enum: [Undefined, Fr, En, Bi]
          example: "Fr"
        Active:
          type: boolean
          description: "False when the customer's account is closed"
          example: true
        MinWeight:
          type: number
          format: float
          example: 5.0
          description: "Minimum  (lbs)"
        Note:
          type: string
          description: "Customer note"
          example: "Déménagé/Moved"
    DTODimensions:
      type: object
      properties:
        Height:
          type: number
          format: float
          example: 6.5
          description: "Height of the box in inches"
        Length:
          type: number
          format: float
          example: 12
          description: "Length of the box in inches"
        Width:
          type: number
          format: float
          example: 8
          description: "Width of the box in inches"
        Cubing:
          type: number
          format: float
          example: 2.6
          description: "Volume of the parcel in cubic foot. Calculated with 'Width * Height * Length) / 1728'"
    DTOParcelInfo:
      type: object
      properties:
        ParcelId:
          type: integer
          format: int64
          description: "11 digit number to identify the parcel"
          example: 50133944801
        ParcelNumber:
          type: integer
          format: int32
          description: "Number of the parcel in the shipment, starting at 1"
        NCV:
          type: boolean
          description: "Non conveyable. These are the criterias for non-conveyable items :
-	At least one of the dimensions exceed 36 inches (91.5cm) or one of the two smallest dimensions exceeds 30 inches (76cm)
-	Weight exceeds 70 lbs (32 kg)
-	Identified as non-conveyable with stickers
-	Is a bucket
-	Hazardous materials identified as toxic, corrosive
-	In bulk items like tires, display stands
-	Objects wrapped in plastic or paper
-	Bags or pouches"
        Weight:
          type: number
          format: float
          description: "Weight of the parcel (lbs)"
        Status:
          type: string
          enum: [Creation, Pickup, Transit, OutForDelivery, Delivered, OnHold, Attention, Cancelled, ReturnCompleted, OutForPickup, RefusedDelivery, ReturnToSender]
        StatusDescriptionEn:
          type: string
          description: 'Description of Status in english'
          example: 'In transit'
        StatusDescriptionFr:
          type: string
          description: 'Description of Status in french'
          example : 'En transit'
        EstimatedDeliveryDate:
          type: string
          format: date
          description: 'Live estimated date of delivery'
          example: '2021-04-16'
        EstimatedDeliveryTime:
          type: string
          description: 'Live estimated time of delivery (only available during day of delivery), does not include margin of error'
          example: '13:15'
        EstimatedDeliveryTimeFr:
          type: string
          description: 'Readable EstimatedTime in french'
          example: 'Entre 12:45 et 13:45'
        EstimatedDeliveryTimeEn:
          type: string
          description: 'Readable EstimatedTime in english'
          example: 'Between 12:45 and 13:45'
        Dimensions:
          $ref: '#/components/schemas/DTODimensions'
        History:
          type: array
          items:
            $ref: '#/components/schemas/DTOParcelHistory'
    DTOPrintPreference:
      type: object
      properties:
        OutputFormat:
          type: string
          enum: [None, Format85x11, Format4x6]
        PrintPhone:
          type: boolean
          description: "Show the phone number on the label"
        HideAccountNumber:
          type: boolean
          description: "Hide the account number on the label"
    DTOSender:
      type: object
      properties:
        Contact:
          type: string
          description: Name of the person receiving the shipment
          example: Sonia
          maxLength: 50
        AccountNumber:
          type: string
          description: Account Id used to identify and retrieve the consignee
          example: NC33233
          maxLength: 15
        AccountName:
          type: string
          description: Consignee name
          example: Coffee Shop
          maxLength: 40
        Address1:
          type: string
          description: First part of address, includes street number and street name
          example: 433 Apple street
          maxLength: 35
        Address2:
          type: string
          description: Second part of address, optional
          example: 3rd floor
          maxLength: 35
        PostalCode:
          type: string
          example: H2H2S2
          maxLength: 6
        City:
          type: string
          example: Montreal
          maxLength: 35
        ProvinceState:
          type: string
          example: QC
          maxLength: 50
        Phone:
          type: string
          description: "Sender's phone number"
          example: 555123456
        IsResidential:
          type: boolean
        SmsNotification:
          type: boolean
          description: Enable or disable SMS notifications
          example: true
          default: false
        EmailNotification:
          type: boolean
          description: Enabled or disables Email notifications
          example: true
          default: false
        NoCivic:
          type: string
          description: Civic address number or street number
          example: 880
          maxLength: 20
        Suite:
          type: string
          example: 400
          maxLength: 30
        StreetName:
          type: string
          description: Name of the street
          example: Rue Claudia
          maxLength: 50
        Email:
          type: string
          example: example@gmail.com
    DTOShipment:
      type: object
      required:
        - CustomerId
        - ShipmentId
        - ExpeditionDate
        - TotalParcels
        - TotalWeight
        - Sender
        - Destination
        - Accessory
        - Parcels
        - PrintPreference
      properties:
        CustomerId:
          type: integer
          format: int32
          description: Nationex Customer Id (5 or 6 digits)
          example: 113300
        ShipmentId:
          type: integer
          format: int32
          description: Needs to be -1 for auto generation, 9 digits otherwise, used to identify and track the shipment
          example: 103882774
        ExpeditionDate:
          type: string
          format: date
          description: The expedition date
          example: "2021-03-30"
        TotalParcels:
          type: integer
          format: int32
          description: The quantity of parcels in the shipment. Cannot exceed 99.
          example: 2
          minimum: 1
          maximum: 99
        TotalWeight:
          type: number
          format: float
          description: Sum of weights of shipments (lbs)
          example: 5.5
        ShipmentStatus:
          type: string
          enum: [Creation, Pickup, Transit, OutForDelivery, Delivered, OnHold, Attention, Cancelled, ReturnCompleted, OutForPickup, RefusedDelivery, ReturnToSender, PartiallyPickedUp, PartiallyInTransit, PartiallyOutForDelivery, PartiallyDelivered]
          description: "Global status of the entire shipment"
          example: 'DataReceived'
        ShipmentStatusFr:
          type: string
          description: "Readable ShipmentStatus in french"
          example: "Données reçues"
        ShipmentStatusEn:
          type: string
          description: "Readable ShipmentStatus in english"
          example: "Data received"
        ShipmentType:
          type: string
          enum: [Delivery, PickupReturn, PickupDelivery]
          example: Delivery
          default: Delivery
        ReferenceNumber:
          type: string
          description: Reference number, string which can be used to track the shipment
          example: CX4335
        Note:
          type: string
          description: A delivery driver note, this will be print on the label.
          example: If no answer leave under the stairs
          maxLength: 100
        BillingAccount:
          type: integer
          format: int32
          description: Nationex Customer ID of the collect account if different from shipping account
          example: 165556
        Sender:
          $ref: '#/components/schemas/DTOSender' 
        Destination:
          $ref: '#/components/schemas/DTODestination' 
        Accessory:
          $ref: '#/components/schemas/DTOAccessory'
        Parcels:
          type: array
          items:
            $ref: '#/components/schemas/DTOParcelInfo'
        ConsolId:
          type: integer
          format: int32
          description: 'Id of the consolidated shipment. Corresponds to the lowest ShipmentId of the shipments going to the same address, same day'
          example: 103882771
        Photos:
          type: array
          items:
            $ref: '#/components/schemas/DTOPhoto'
          description: "Signatures and photos. Linked with the PhotoId's and SignatureId's from DTOParcelHistory"
    DTOShipmentCreate:
      type: object
      description: "Request object to create a shipment. For a Delivery and PickupDelivery type, Destination is required. For a PickupReturn and PickupDelivery type, Sender is required. Otherwise it is the customer's address by default"
      required:
        - CustomerId
        - ShipmentId
        - ExpeditionDate
        - TotalParcels
        - TotalWeight
      properties:
        CustomerId:
          type: integer
          format: int32
          description: Nationex Customer Id (5 or 6 digits)
          example: 113300
        ShipmentId:
          type: integer
          format: int32
          description: Needs to be -1 for auto generation, 9 digits otherwise, used to identify and track the shipment
          example: -1
          default: -1
        ExpeditionDate:
          type: string
          format: date
          description: The expedition date
          example: "2021-03-30"
        ShipmentType:
          type: string
          enum: [Delivery, PickupReturn, PickupDelivery]
          example: Delivery
          default: Delivery
          description: A delivery is a shipment with the Nationex Customer as origin and Consignee as destination
        TotalParcels:
          type: integer
          format: int32
          description: The quantity of parcels in the shipment. Cannot exceed 99.
          example: 2
          minimum: 1
          maximum: 99
        TotalWeight:
          type: number
          format: float
          description: Sum of weights of shipments (lbs)
          example: 5.5
        ReferenceNumber:
          type: string
          description: Reference number, string which can be used to track the shipment
          example: CX4335
        Note:
          type: string
          description: A Delivery Note
          example: If no answer leave under the stairs
          maxLength: 100
        BillingAccount:
          type: integer
          format: int32
          description: Nationex Customer ID of the billing account if different from shipping account
          example: 165556
        Sender:
          $ref: '#/components/schemas/DTOSender'
        Destination:
          $ref: '#/components/schemas/DTODestination'
        Accessory:
          $ref: '#/components/schemas/DTOAccessory'
    DTOShipmentCreated:
      type: object
      properties:
        ShipmentId:
          type: integer
          format: int32
          description: 9 digits number, used to identify and track the shipment
          example: 501883938
        ConsolId:
          type: integer
          format: int32
          description: 'Id of the consolidated shipment. Corresponds to the lowest ShipmentId of the shipments going to the same address, same day'
          example: 501883122
        BillingAccount:
          type: integer
          format: int32
          description: CustomerID being billed
          example: 165556
        ParcelIds:
          type: array
          items:
            type: string
          example: [50188393801, 50188393802]
        RatesDetail:
          $ref: '#/components/schemas/DTORatesDetail'
    DTOShipmentRatesRequest:
      type: object
      required:
      - CustomerId
      - DestinationPostalCode
      properties:
        CustomerId:
            type: integer
            format: int32
            description: Nationex Customer Id (5 or 6 digits)
            example: 113300
        ExpeditionDate:
            type: string
            format: date
            description: "The expedition or pickup date. Not required, but this will be used to calculate the fuel rate, which changes weekly. If blank, the current week's rate will be used."
            example : "2021-03-31"
        ShipmentType:
          type: string
          enum: [Delivery, PickupReturn, PickupDelivery]
          example: Delivery
          default: Delivery
        SourcePostalCode:
            type: string
            description: Postal code of the origin
            example: "J3Y5T7"
        DestinationPostalCode:
            type: string
            description: Postal code of the destination
            example: "H2H2S2"
        TotalWeight:
            type: number
            format: float
            description: Total weight of the shipment in pounds (lbs)
            example: 12.20
        TotalParcels:
            type: integer
            format: int32
            description: The quantity of parcels in the shipment. Cannot exceed 99.
            example: 2
            minimum: 1
            maximum: 99
        Accessories:
            $ref: '#/components/schemas/DTOAccessory'
        Parcels:
          description: "Optional, can be used to provide weight and dimensions of individual parcels for a more accurate price"
          type: array
          items:
            $ref: '#/components/schemas/DTORatesRequestParcel'
    DTOConsignee:
      type: object
      required:
      - CustomerId
      - PostalCode
      properties:
        ConsigneeId:
          type: integer
          format: int32
          description: Nationex Consignee Id, assigned by Nationex, used to update or delete the consignee
          example: 21892729
        CustomerId:
          type: integer
          format: int32
          description: Nationex Customer Id (5 or 6 digits)
          example: 113300
          minimum: 10000
          maximum: 999999
        Account:
          type: string
          description: Account Id used to identify and retrieve the consignee
          example: NC33233
          maxLength: 15
        Name:
          type: string
          description: Consignee name
          example: Coffee Shop
          maxLength: 40
        Address1:
          type: string
          description: First part of address, includes street number and street name
          example: 433 Apple street
          maxLength: 35
        Address2:
          type: string
          description: Second part of address, optional
          example: 3rd floor
          maxLength: 35
        City:
          type: string
          example: Montreal
          maxLength: 35
        Province:
          type: string
          example: QC
          maxLength: 50
        PostalCode:
          type: string
          example: H2H2S2
          maxLength: 6
        Email:
          type: string
          example: example@gmail.com
          maxLength: 50
        Phone:
          type: string 
          example: 4183776671
          maxLength: 15
        SMSNotification:
          type: boolean
          description: Enables or disable SMS notifications
          example: true
          default: false
        EmailNotification:
          type: boolean
          description: Enabled or disables Email notifications
          example: true
          default: false
        Contact:
          type: string
          description: Name of the person receiving the shipment
          example: Sonia
          maxLength: 50
        Note:
          type: string
          description: A Delivery Note
          example: If no answer leave under the stairs
          maxLength: 100
        NoCivic:
          type: string
          description: Civic address number or street number
          example: 880
          maxLength: 20
        Suite:
          type: string
          example: 400
          maxLength: 30
        Floor:
          type: string
          example: 2nd floor
          maxLength: 50
        StreetName:
          type: string
          description: Name of the street
          example: Rue Claudia
          maxLength: 50
        IsResidential:
          type: boolean
          example: true
          default: false
        AutoCollect:
          type: boolean
          default: false
        SNR:
          type: boolean
          description: No signature required if true
          example: false
          default: false
    DTOEconomaxPackageRenewal:
      type: object
      required:
       - CustomerId
       - Amount
       - Gst
       - Pst
       - Hst
      properties:
        CustomerId:
          type: integer
          format: int32
          description: Nationex Customer Id (5 or 6 digits)
          example: 10288
          minimum: 10000
          maximum: 999999
        Amount:
          type: number
          format: float
          description: Renewal amount
          example: 200.00
        Gst:
          type: number
          format: float
          description: Renewal gst (Goods and Services Tax)
          example: 11.33
        Pst:
          type: number
          format: float
          description: Renewal pst (Provincial Sales Tax)
          example: 21.12
        Hst:
          type: number
          format: float
          description: Renewal hst (Harmonized Sales Tax)
          example: 3.44
    DTORatesDetail:
      description: "Contains a shipment's rates details. Note : the example amounts are random number, they are not accurate"
      type: object
      properties:
        BasePrice:
          type: number
          format: float
          description: "Price without any tax or charges"
          example: 47.22
        SurchargeCharges:
          description: "Special charges for excessive parcel length or remote areas"
          type: array
          items:
            $ref: '#/components/schemas/DTOSurchargeCharge'
        TaxCharges:
          description: "Federal and provincial tax rates and charges"
          type: array
          items:
            $ref: '#/components/schemas/DTOTaxCharge'
        AccessoryCharges:
          description: "Optionnal charges for extra services. Include Freezing protection, Dangerous goods, Special 10h30 service, COD and Insurance"
          type: array
          items:
            $ref: '#/components/schemas/DTOAccessoryCharge'
        NCVCharge:
          type: number
          format: float
          description: "Non-Conveyable charge. These are the criterias for non-conveyable items :
-  At least one of the dimensions exceed 36 inches (91.5cm) or one of the two smallest dimensions exceeds 30 inches (76cm)
-  Weight exceeds 70 lbs (32 kg)
-  Identified as non-conveyable with stickers
-  Is a bucket
-  Hazardous materials identified as toxic, corrosive
-  In bulk items like tires, display stands
-  Objects wrapped in plastic or paper
-  Bags or pouches"
          example: 4.00
        FuelRate:
          type: number
          format: float
          description: "Rate of fuel charge, varies week to week"
          example: 0.1425
        FuelCharge:
          type: number
          format: float
          description: "Fuel charge"
          example: 2.51
        SubTotal:
          type: number
          format: float
          description: "Includes baseprice and all charges except fuel and taxes"
          example: 55.89
        Total:
          type: number
          format: float
          example: 61.12
        TotalBillableWeight:
          type: number
          format: float
          example: 0.00
        BillingZone:
          type: string
          description: Nationex billing zone
          example: "NL"
        DelayTransitDays:
          type: integer
          format: int32
          example: 2
          description: "Transit delay in business days"
        EstimatedDeliveryDate:
          type: string
          format: date
          example: '2021-05-05'
          description: 'Estimated date of delivery'
    DTOTaxCharge:
      description: "Name, rate and amount of tax"
      type: object
      properties:
        Id:
          type: string
          example: "GST"
        Charge:
          type: number
          format: float
          description: "Amount charged"
          example: 12.905
        Rate:
          type: number
          format: float
          description: "Current tax rate"
        NameFr:
          type: string
          example: "TPS"
        NameEn:
          type: string
          example: "GST"
    DTOSurchargeCharge:
      description: "Name, rate and amount of charge for excessive parcel length or remote areas"
      type: object
      properties:
        Id:
          type: string
          example: "519"
        Charge:
          type: number
          format: float
          description: "Amount charged"
          example: 21.211
        BeyondId:
          type: integer
          format: int32
          description: "Id of the beyond charge for remote areas"
          example: 102
        NameFr:
          type: string
          example: "Surcharge région éloignée"
        NameEn:
          type: string
          example: "Beyond surcharge"
    DTOAccessoryCharge:
      description: "Optionnal charges for extra services. Include Freezing protection, Dangerous goods, Special 10h30 service, COD and Insurance"
      type: object
      properties:
        Id:
          type: string
          example: "3"
        Charge:
          type: number
          format: float
          description: "Amount charged"
          example: 36.545
        NameFr:
          type: string
          example: "Matières dangereuses"
        NameEn:
          type: string
          example: "Dangerous goods"
    DTOGeocoding:
      description: "Latitude and longitude"
      type: object
      properties:
        Longitude:
          type: number
          format: float
          example: -78.098725
        Latitude:
          type: number
          format: float
          example: 48.575377
    DTOTransitDelay:
      description: "Transit days estimation"
      type: object
      properties:
        BusinessDays:
          type: integer
          format: int32
          description: "Estimated number of business days for transit. Starting from pickupDate and not necessarily from current day."
          example: 1
        DeliveryDate:
          type: string
          format: date
          description: "Estimated date of delivery"
          example: "2021-04-05"
        TotalDays:
          type: integer
          format: int32
          description: "Estimated totals days for transit including weekends and holidays. Starting from pickupDate and not necessarily from current day."
          example: 3
    DTORatesRequestParcel:
      type: object
      properties:
        NCV:
          type: boolean
          description: "Non conveyable. These are the criterias for non-conveyable items :
-	At least one of the dimensions exceed 36 inches (91.5cm) or one of the two smallest dimensions exceeds 30 inches (76cm)
-	Weight exceeds 70 lbs (32 kg)
-	Identified as non-conveyable with stickers
-	Is a bucket
-	Hazardous materials identified as toxic, corrosive
-	In bulk items like tires, display stands
-	Objects wrapped in plastic or paper
-	Bags or pouches"
        Weight:
          type: number
          format: float
          example: 15.5
          description: "Weight of the parcel (only lbs supported)"
        Dimensions:
          $ref: '#/components/schemas/DTODimensions'
    DTOConsigneeCreated:
      type: object
      properties:
        ConsigneeId:
          type: integer
          format: int32
          description: Id to retrieve and modify the consignee
          example: 20102848
    DTOContactCreated:
      type: object
      properties:
        ConsigneeId:
          type: integer
          format: int32
          description: Id to retrieve and modify the contact
          example: 10102848
    DTOLocation:
      type: object
      description: "Postal code availability information"
      properties:
        PostalCode:
          type: string
          example: "H2H2S2"
          maxLength: 6
        Enabled:
          type: boolean
          example: true
          description: "Is served by Nationex"
        CODAvailable:
          type: boolean
          example: true
          description: "COD service is available"
        PickupAvailable:
          type: boolean
          example: true
          description: "Pickup service is available"
        Before10h30Available:
          type: boolean
          example: true
          description: "Before 10h30 AM delivery service is available"
        City:
          type: string
          example: "Montreal"
        ProvinceFr:
          type: string
          example: "Québec"
        ProvinceEn:
          type: string
          example: "Quebec"
        Zone:
          type: string
          example: "MTL"
        BeyondId:
          type: integer
          example: "100"
        DeliveryDays:
          description: "Days of week serviced by Nationex."
          type: array
          items:
            type: string
            enum: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
          example: [Monday, Tuesday, Wednesday, Thursday, Friday]
    DTOAddressChange:
      type: object
      description: "Contains the new address of the shipment"
      properties:
        ShipmentId:
          type: integer
          format: int32
          minimum: 100000000
          maximum: 999999999
        Sender:
          $ref: '#/components/schemas/DTOSender'
        Destination:
          $ref: '#/components/schemas/DTODestination'
    DTOUserLogin:
      type: object
      required:
        - CustomerId
      properties:
        CustomerId:
          type: integer
          description: User's customer id
          example: 123
        WebUserApiToken:
          type: string
          description: User's api token
          example: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    DTOInvoiceInfo:
      type: object
      description: "Contains dates and download links to download invoices documents"
      properties:
        ShippingAccount:
          description: "Nationex CustomerId (5 or 6 digits), can be different from billing account"
          type: integer
          format: int32
          example: 113300
        InvoiceDate:
          description: "Date of the invoice"
          type: string
          format: date
          example: "2021-05-04"
        InvoiceLinkToken:
          description: "Link to download invoice"
          type: string
        ManifestPDFLinkToken:
          description: "Link to download PDF"
          type: string
        ManifestExcelLinkToken:
          description: "Link to download Excel"
          type: string
        MiscLinkToken:
          description: "Link to download Misc"
          type: string
    DTOContact:
      type: object
      description: "Contact for nationex customer"
      properties:
        ContactId:
          type: integer
          format: int32
          example: 10038
        Name:
          type: string
          example: 'Joe Blo'
        Title:
          type: string
          example: 'Director'
        Email:
          type: string
          example: 'joeblo@gmail.com'
        Phone:
          type: string
          example: '8302938472'
        Fax:
          type: string
          example: '8302938472'
        Language:
          type: string
          enum: [Fr, En]
          example: 'Fr'
        FirstContact:
          description: 'First contact'
          type: boolean
          example: false
          default: false
        EmergencyContact:
          description: 'Contact for emergency'
          type: boolean
          example: false
          default: false
        EdiContact:
          description: 'Contact for EDI'
          type: boolean
          example: false
          default: false
        AccountingContact:
          description: 'Contact for accounting'
          type: boolean
          example: false
          default: false
        SalesContact:
          description: 'Contact for sales'
          type: boolean
          example: false
          default: false
        OperationsContact:
          description: 'Contact for operations'
          type: boolean
          example: false
          default: false
        CustomerServiceContact:
          description: 'Contact for customer service'
          type: boolean
          example: false
          default: false
    DTOChangePasswordRequest:
      type: object
      description: "Change password request info"
      required:
        - UserId
        - NewPassword
      properties:
        UserId:
          type: string
          example: 8392
        NewPassword:
          type: string
          example: lawow90imldkf
    DTOPhoto:
      type: object
      description: "Contains the Id of the picture or signature and Base64 string data"
      properties:
        Id:
          type: integer
          format: int64
          example: 18840452
          description: 'Contains either PhotoId or SignatureId'
        Data:
          type: string
          format: byte
          example: "iVBORw0KGgoAAAANSUhEUgAAAZsAAACBCAYAAAAWohexAAAEtUlEQVR4Xu3VwQkAMAwDsXj/pTPF
/dQBGhCG23kECBAgQCAWWPy/7wkQIECAwImNERAgQIBALiA2ObEDBAgQICA2NkCAAAECuYDY5MQO
ECBAgIDY2AABAgQI5AJikxM7QIAAAQJiYwMECBAgkAuITU7sAAECBAiIjQ0QIECAQC4gNjmxAwQI
ECAgNjZAgAABArmA2OTEDhAgQICA2NgAAQIECOQCYpMTO0CAAAECYmMDBAgQIJALiE1O7AABAgQI
iI0NECBAgEAuIDY5sQMECBAgIDY2QIAAAQK5gNjkxA4QIECAgNjYAAECBAjkAmKTEztAgAABAmJj
AwQIECCQC4hNTuwAAQIECIiNDRAgQIBALiA2ObEDBAgQICA2NkCAAAECuYDY5MQOECBAgIDY2AAB
AgQI5AJikxM7QIAAAQJiYwMECBAgkAuITU7sAAECBAiIjQ0QIECAQC4gNjmxAwQIECAgNjZAgAAB
ArmA2OTEDhAgQICA2NgAAQIECOQCYpMTO0CAAAECYmMDBAgQIJALiE1O7AABAgQIiI0NECBAgEAu
IDY5sQMECBAgIDY2QIAAAQK5gNjkxA4QIECAgNjYAAECBAjkAmKTEztAgAABAmJjAwQIECCQC4hN
TuwAAQIECIiNDRAgQIBALiA2ObEDBAgQICA2NkCAAAECuYDY5MQOECBAgIDY2AABAgQI5AJikxM7
QIAAAQJiYwMECBAgkAuITU7sAAECBAiIjQ0QIECAQC4gNjmxAwQIECAgNjZAgAABArmA2OTEDhAg
QICA2NgAAQIECOQCYpMTO0CAAAECYmMDBAgQIJALiE1O7AABAgQIiI0NECBAgEAuIDY5sQMECBAg
IDY2QIAAAQK5gNjkxA4QIECAgNjYAAECBAjkAmKTEztAgAABAmJjAwQIECCQC4hNTuwAAQIECIiN
DRAgQIBALiA2ObEDBAgQICA2NkCAAAECuYDY5MQOECBAgIDY2AABAgQI5AJikxM7QIAAAQJiYwME
CBAgkAuITU7sAAECBAiIjQ0QIECAQC4gNjmxAwQIECAgNjZAgAABArmA2OTEDhAgQICA2NgAAQIE
COQCYpMTO0CAAAECYmMDBAgQIJALiE1O7AABAgQIiI0NECBAgEAuIDY5sQMECBAgIDY2QIAAAQK5
gNjkxA4QIECAgNjYAAECBAjkAmKTEztAgAABAmJjAwQIECCQC4hNTuwAAQIECIiNDRAgQIBALiA2
ObEDBAgQICA2NkCAAAECuYDY5MQOECBAgIDY2AABAgQI5AJikxM7QIAAAQJiYwMECBAgkAuITU7s
AAECBAiIjQ0QIECAQC4gNjmxAwQIECAgNjZAgAABArmA2OTEDhAgQICA2NgAAQIECOQCYpMTO0CA
AAECYmMDBAgQIJALiE1O7AABAgQIiI0NECBAgEAuIDY5sQMECBAgIDY2QIAAAQK5gNjkxA4QIECA
gNjYAAECBAjkAmKTEztAgAABAmJjAwQIECCQC4hNTuwAAQIECIiNDRAgQIBALiA2ObEDBAgQICA2
NkCAAAECuYDY5MQOECBAgIDY2AABAgQI5AJikxM7QIAAAQJiYwMECBAgkAs8wZUAgqa0VWgAAAAA
SUVORK5CYII="
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: Address1 is too long.
security:
    - BasicAuth: []